<!doctype html>
<html lang="ko">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>스텔라이브 & 이세계아이돌 팬 허브 · v9.2 (정적 관리자 + Google 로그인)</title>
  <meta name="description" content="스텔라이브와 이세계아이돌 팬들을 위한 올인원 인터랙티브 페이지" />

  <!-- (선택) 메타에 Client ID를 지정해도 되고, config/app-config.json에서 로드해도 됩니다. -->
  <meta name="google-signin-client_id" content="669302423820-r62aj48h4pf8gn5ba37s15ojrid0bmma.apps.googleusercontent.com" />

  <!-- Google Identity Services -->
  <script src="https://accounts.google.com/gsi/client" async defer></script>

  <!-- Chart.js (투표 시각화) -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;600;700;900&family=Inter:wght@400;600;800&display=swap" rel="stylesheet">

  <style>
    /* ===================== RESET & THEME ===================== */
    *,*::before,*::after{box-sizing:border-box;margin:0;padding:0}
    :root{
      --bg:#0f1115; --bg-soft:#12151b; --text:#e9eef7; --muted:#a7b0c0;
      --surface:#161a22; --glass:rgba(255,255,255,.06); --stroke:rgba(255,255,255,.08);
      --accent-stelli:#7d86ff; --accent-isegye:#ff77b6; --accent:#7d86ff;
      --ok:#39d98a; --warn:#ffd166; --err:#ff6b6b; --shadow:0 10px 30px rgba(0,0,0,.35); --radius:14px;
    }
    [data-theme="light"]{
      --bg:#f6f8ff; --bg-soft:#f0f3ff; --text:#1c2333; --muted:#4b556b;
      --surface:#ffffff; --glass:rgba(18,30,64,.06); --stroke:rgba(18,30,64,.08); --shadow:0 10px 24px rgba(21,24,45,.12);
    }
    body{font-family:'Noto Sans KR',Inter,system-ui,-apple-system,Segoe UI,Roboto,sans-serif;background:var(--bg);color:var(--text);min-height:100vh}
    a{color:var(--accent);text-decoration:none} a:hover{text-decoration:underline}
    button{cursor:pointer;border:0;background:transparent;color:inherit;font:inherit}
    img{display:block}
    .hide{display:none} .small{font-size:.86rem}

    /* ===================== LAYOUT ===================== */
    header{position:sticky;top:0;background:linear-gradient(180deg,var(--surface),transparent);backdrop-filter:saturate(140%) blur(8px);border-bottom:1px solid var(--stroke);z-index:50}
    .topbar{max-width:1200px;margin:0 auto;display:flex;align-items:center;gap:1rem;justify-content:space-between;padding:12px 16px}
    .brand{display:flex;align-items:center;gap:.75rem;font-weight:800;letter-spacing:.3px}
    .brand .dot{width:10px;height:10px;border-radius:999px;background:var(--accent)}
    nav.tabs{display:flex;gap:.25rem;flex-wrap:wrap}
    nav.tabs button{padding:.55rem .9rem;border-radius:10px;border:1px solid var(--stroke);background:var(--glass)}
    nav.tabs button.active{background:var(--accent);color:#fff;border-color:transparent}
    .toolbar{display:flex;align-items:center;gap:.5rem}
    .chip{padding:.35rem .6rem;border-radius:999px;border:1px solid var(--stroke);background:var(--glass);font-size:.85rem}
    .btn{display:inline-flex;align-items:center;gap:.5rem;padding:.6rem 1rem;border-radius:12px;border:1px solid var(--stroke);background:var(--glass);transition:transform .06s ease}
    .btn:hover{transform:translateY(-1px)}
    .btn.primary{background:var(--accent);color:#fff;border-color:transparent}

    main{max-width:1200px;margin:24px auto;padding:0 16px;display:grid;grid-template-columns:1fr;gap:16px}
    @media(min-width:992px){main{grid-template-columns:1fr 1fr}}
    .section{background:linear-gradient(180deg,var(--surface),transparent);border:1px solid var(--stroke);border-radius:var(--radius);box-shadow:var(--shadow);padding:16px}
    .section h2{font-size:1.4rem;letter-spacing:.2px;margin-bottom:10px}
    .muted{color:var(--muted)}

    /* HERO */
    .hero{grid-column:1/-1;position:relative;overflow:hidden}
    .hero-wrap{display:grid;grid-template-columns:1.1fr .9fr;gap:16px;align-items:center}
    .hero .cta{display:flex;gap:.6rem;margin-top:10px}
    .pill{display:inline-flex;align-items:center;gap:.5rem;padding:.35rem .7rem;border-radius:999px;background:var(--glass);border:1px solid var(--stroke);font-size:.9rem}
    .gradient{position:absolute;inset:-40% -20% auto -20%;height:260px;background:radial-gradient(circle at 20% 20%,var(--accent) 0%,transparent 60%),radial-gradient(circle at 70% 10%,var(--accent-isegye) 0%,transparent 55%);filter:blur(40px);opacity:.35;pointer-events:none}
    .hide-mobile{display:block} @media(max-width:860px){.hero-wrap{grid-template-columns:1fr}.hide-mobile{display:none}}

    /* MEMBERS */
    .group-switch{display:flex;gap:8px;margin-bottom:10px}
    .group-switch button{flex:1}
    .filters{display:flex;flex-wrap:wrap;gap:8px;margin:8px 0 12px}
    .search{flex:1;min-width:180px;display:flex;gap:8px}
    .search input{flex:1;padding:.6rem .8rem;border-radius:10px;border:1px solid var(--stroke);background:var(--glass);color:inherit}
    .members-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:12px}
    .card{position:relative;border:1px solid var(--stroke);background:linear-gradient(180deg,var(--surface),rgba(255,255,255,.02));border-radius:14px;padding:12px;overflow:hidden}
    .card .row{display:flex;align-items:center;gap:12px}
    .pfp{width:60px;height:60px;border-radius:12px;overflow:hidden;border:1px solid var(--stroke);background:linear-gradient(135deg,var(--accent),var(--accent-isegye));display:grid;place-items:center;color:#fff;font-weight:900}
    .pfp img{width:100%;height:100%;object-fit:cover;display:block}
    .badge{font-size:.75rem;padding:.2rem .45rem;border-radius:8px;border:1px solid var(--stroke);background:var(--glass)}
    .live-dot{width:8px;height:8px;border-radius:999px;background:var(--warn);display:inline-block;margin-left:6px}
    .live-dot.on{background:#ff4d4f;box-shadow:0 0 0 2px rgba(255,77,79,.25)}
    .fav{position:absolute;top:10px;right:10px;font-size:18px}
    .actions{display:flex;gap:8px;margin-top:10px}

    /* FAVORITES */
    #favorites .empty{padding:8px;border:1px dashed var(--stroke);border-radius:12px}

    /* GALLERY */
    .gallery-toolbar{display:flex;gap:8px;flex-wrap:wrap;margin-bottom:8px}
    .gallery-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:12px}
    .tile{position:relative;border:1px solid var(--stroke);border-radius:12px;overflow:hidden;background:var(--glass)}
    .tile img{width:100%;height:220px;object-fit:cover;display:block}
    .tile a{position:absolute;inset:0}
    .gallery-grid .tweet{border:1px solid var(--stroke);border-radius:12px;overflow:hidden;background:var(--glass)}
    .grid-img{width:100%;border-radius:12px;border:1px solid var(--stroke);background:var(--glass)}
    .slideshow{position:fixed;inset:0;background:rgba(0,0,0,.8);display:none;align-items:center;justify-content:center;z-index:100}
    .slideshow.show{display:flex}
    .slide-inner{max-width:92vw;max-height:85vh}
    .slide-inner img{max-width:100%;max-height:85vh;border-radius:12px}

    /* COVER */
    .cover-controls{display:flex;flex-wrap:wrap;gap:8px;margin-bottom:8px}
    .cover-embed{aspect-ratio:16/9;width:100%;border:0;border-radius:12px}

    /* LOG & CONFESSION */
    form.inline{display:flex;gap:8px;margin:8px 0}
    form.inline input,form.inline textarea{flex:1;padding:.6rem .8rem;border-radius:10px;border:1px solid var(--stroke);background:var(--glass);color:inherit}
    ul.list{list-style:none;display:flex;flex-direction:column;gap:6px;margin-top:4px}
    ul.list li{display:flex;justify-content:space-between;align-items:center;border:1px solid var(--stroke);background:var(--glass);border-radius:10px;padding:8px}

    /* VOTE */
    .vote-form{display:flex;flex-direction:column;gap:8px}
    .vote-form label{display:flex;align-items:center;gap:8px;padding:6px 8px;border-radius:8px;border:1px solid var(--stroke);background:var(--glass)}
    .vote-meta{font-size:.95rem}
    .chart-wrap{background:var(--bg-soft);border:1px solid var(--stroke);border-radius:12px;padding:8px}

    /* USER */
    .user-badge{display:inline-flex;align-items:center;gap:.5rem}
    .user-badge img{width:24px;height:24px;border-radius:50%;border:1px solid var(--stroke)}

    /* MODAL */
    .modal-backdrop{position:fixed;inset:0;background:rgba(0,0,0,.45);display:none;align-items:center;justify-content:center;z-index:100}
    .modal{width:360px;background:var(--surface);border:1px solid var(--stroke);border-radius:16px;padding:16px;box-shadow:var(--shadow)}
    .modal h3{margin-bottom:10px}
    .modal .row{display:flex;gap:8px;flex-wrap:wrap;align-items:center;margin-bottom:8px}
    .modal input{flex:1;min-width:240px;padding:.6rem .8rem;border-radius:10px;border:1px solid var(--stroke);background:var(--glass);color:inherit}
  </style>

  <!-- X 타임라인 위젯 (폴백용) -->
  <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</head>
<body data-theme="dark" class="theme-STELLIVE">
  <header>
    <div class="topbar">
      <div class="brand"><span class="dot"></span>팬 허브<span class="chip">STELLIVE & ISEGYE</span></div>
      <nav class="tabs">
        <button data-tab="home" class="active">홈</button>
        <button data-tab="members">멤버소개</button>
        <button data-tab="favorites">최애</button>
        <button data-tab="gallery">팬아트</button>
        <button data-tab="cover">커버곡</button>
        <button data-tab="log">일기</button>
        <button data-tab="confession">고백함</button>
        <button data-tab="avatar">아바타</button>
        <button data-tab="vote">투표</button>
      </nav>
      <div class="toolbar">
        <button id="liveBanner" class="btn chip" title="방송 바로가기" style="display:none">📡 방송 중!</button>
        <button id="themeToggle" class="btn" title="테마 전환">🌗</button>
        <!-- 관리자는 로그인 후 노출 -->
        <button id="settingsBtn" class="btn" title="설정" style="display:none">⚙️ 설정</button>
        <span id="userName" class="chip user-badge">게스트</span>
        <button id="loginBtn" class="btn">로그인</button>
      </div>
    </div>
  </header>

  <main>
    <!-- HERO -->
    <section id="home" class="section hero">
      <div class="gradient"></div>
      <div class="hero-wrap">
        <div>
          <div class="pill">팬이 만든 올인원 허브</div>
          <h1 style="margin:10px 0 6px; font-size:2.2rem; letter-spacing:.2px;">스텔라이브 & 이세계아이돌 — <span style="color:var(--accent)">하나의 페이지</span>에서 다 한다!</h1>
          <p class="muted">최애 표시(여러 명), 라이브 알림, <strong>팬아트(해시태그 이미지 3개/일 · 관리자 1개 고정)</strong>, <strong>전 멤버 커버 재생목록</strong>, 일기·고백함(삭제)·투표(전체/그룹)·<strong>실제 Google 로그인</strong>.</p>
          <div class="cta">
            <button class="btn primary" onclick="switchTab('members')">멤버 보러가기</button>
            <button class="btn" onclick="switchTab('gallery')">팬아트 열기</button>
          </div>
        </div>
        <div class="hide-mobile">
          <canvas id="heroCanvas" width="520" height="300"></canvas>
        </div>
      </div>
    </section>

    <!-- MEMBERS -->
    <section id="members" class="section hide">
      <div class="group-switch">
        <button class="btn primary" data-group="STELLIVE">STELLIVE</button>
        <button class="btn" data-group="ISEGYE">이세계아이돌</button>
        <button class="btn" id="favOnlyBtn">💖 최애만(해당 그룹)</button>
      </div>
      <div class="filters">
        <div class="search"><input id="memberSearch" placeholder="멤버 검색 (이름, 태그)" /></div>
        <span class="chip">정렬: <select id="sortSelect"><option value="fav">최애 우선</option><option value="name">이름</option></select></span>
      </div>
      <div id="memberList" class="members-grid"></div>
    </section>

    <!-- FAVORITES (cross-group) -->
    <section id="favorites" class="section hide">
      <h2>내 최애 (그룹 구분 없이 한곳에)</h2>
      <div id="favGrid" class="members-grid"></div>
      <div id="favEmpty" class="empty muted hide">아직 최애가 없습니다. 멤버 카드의 🤍 버튼을 눌러 추가하세요.</div>
    </section>

    <!-- GALLERY -->
    <section id="gallery" class="section hide">
      <h2>팬아트 갤러리</h2>
      <p class="muted small" style="margin-bottom:8px">X(트위터) 해시태그에서 <strong>이미지 3개/일 랜덤</strong> 전시 · <strong>관리자 1개</strong> 오늘 고정 · 프록시 없으면 타임라인 폴백</p>
      <div class="gallery-toolbar">
        <span class="chip">그룹:
          <select id="galleryGroup">
            <option value="ALL">전체</option>
            <option value="STELLIVE">STELLIVE</option>
            <option value="ISEGYE">이세계아이돌</option>
          </select>
        </span>
        <span class="chip">멤버:
          <select id="galleryMember"></select>
        </span>
        <span class="chip">태그:
          <select id="galleryTag"></select>
        </span>
        <button class="btn" id="reloadGallery">🔄 새로고침</button>
        <!-- 관리자만 노출 -->
        <button class="btn" id="toggleAdmin" style="display:none">🛠️ 관리자</button>
        <label class="btn" for="imageUpload" id="uploadLabel" style="display:none">🖼️ 수동 이미지 업로드</label>
        <input id="imageUpload" type="file" accept="image/*" multiple class="hide" />
        <div class="search" id="tweetAdder" style="display:none"><input id="tweetUrlInput" placeholder="트윗 URL (https://x.com/...)" /><button class="btn" id="addTweetBtn">추가</button></div>
        <button class="btn" id="openSlideshow">▶️ 슬라이드쇼</button>
      </div>
      <!-- Admin panel -->
      <div id="adminPanel" class="hide" style="border:1px dashed var(--stroke);border-radius:12px;padding:10px;margin-top:8px;background:rgba(255,255,255,.02)">
        <div class="row" style="display:flex;gap:8px;flex-wrap:wrap;align-items:center">
          <span class="chip">X 프록시 URL</span>
          <input id="xProxyInput" placeholder="https://&lt;your-worker&gt;" style="flex:1;min-width:260px;padding:.5rem .7rem;border-radius:10px;border:1px solid var(--stroke);background:var(--glass);color:inherit" />
          <button class="btn" id="saveProxy">저장</button>
        </div>
        <div class="row" style="display:flex;gap:8px;flex-wrap:wrap;align-items:center;margin-top:8px">
          <span class="chip">오늘 고정 이미지(선택)</span>
          <input id="pinImg" placeholder="이미지 URL" style="flex:1;min-width:240px;padding:.5rem .7rem;border-radius:10px;border:1px solid var(--stroke);background:var(--glass);color:inherit" />
          <input id="pinHref" placeholder="원본 링크 URL(선택)" style="flex:1;min-width:240px;padding:.5rem .7rem;border-radius:10px;border:1px solid var(--stroke);background:var(--glass);color:inherit" />
          <button class="btn primary" id="savePin">오늘 1개 고정</button>
          <button class="btn" id="clearPin">오늘 고정 해제</button>
        </div>
        <div class="small muted" style="margin-top:6px">※ 고정은 <strong>선택한 태그</strong> 기준으로 오늘 날짜에 1개만 반영됩니다.</div>
      </div>
      <div id="galleryGrid" class="gallery-grid"></div>
    </section>

    <!-- COVER -->
    <section id="cover" class="section hide">
      <h2>커버곡</h2>
      <div class="cover-controls">
        <span class="chip">멤버 선택: <select id="coverMember"></select></span>
        <span class="chip">보기: <select id="coverView"><option value="playlist">재생목록</option><option value="list">목록</option></select></span>
      </div>
      <div id="coverContent"></div>
    </section>

    <!-- LOG -->
    <section id="log" class="section hide">
      <h2>덕질 일기</h2>
      <form id="logForm" class="inline">
        <input id="logInput" placeholder="오늘의 덕질 기록" />
        <button class="btn primary" type="submit">추가</button>
      </form>
      <ul id="logList" class="list"></ul>
    </section>

    <!-- CONFESSION -->
    <section id="confession" class="section hide">
      <h2>익명 고백함</h2>
      <form id="confForm" class="inline">
        <input id="confInput" placeholder="익명으로 남기고 싶은 메시지" />
        <button class="btn primary" type="submit">보내기</button>
      </form>
      <ul id="confList" class="list"></ul>
    </section>

    <!-- AVATAR -->
    <section id="avatar" class="section hide">
      <h2>아바타 꾸미기</h2>
      <canvas id="avatarCanvas" width="220" height="220"></canvas>
      <div id="avatarParts" style="display:flex;gap:8px;flex-wrap:wrap;margin-top:8px"></div>
      <div class="muted" style="margin-top:6px">※ 파츠별 투명 PNG를 업로드하면 합성됩니다. (샘플·업로드·삭제·PNG 저장 지원)</div>
      <input id="partUpload" type="file" accept="image/png" multiple class="hide" />
      <div style="margin-top:8px;display:flex;gap:8px;flex-wrap:wrap">
        <button class="btn" onclick="document.getElementById('partUpload').click()">파츠 업로드</button>
        <button class="btn" id="avatarClear">초기화</button>
        <button class="btn primary" id="avatarSave">PNG로 저장</button>
      </div>
    </section>

    <!-- VOTE -->
    <section id="vote" class="section hide">
      <h2>최애 멤버 투표</h2>
      <div class="vote-meta muted">투표 기간: 매월 1일 ~ 말일 · 현재 기간: <span id="votePeriod"></span> · 1인 1표</div>
      <div class="filters" style="margin-top:8px">
        <span class="chip">보기 범위: <select id="voteScope"><option value="ALL">전체</option><option value="STELLIVE">STELLIVE</option><option value="ISEGYE">이세계아이돌</option></select></span>
        <button class="btn" id="myVoteBtn">내 투표 확인</button>
      </div>
      <div id="voteForm" class="vote-form" style="margin-top:8px"></div>
      <div class="chart-wrap"><canvas id="chart" height="180"></canvas></div>
    </section>
  </main>

  <!-- LOGIN MODAL -->
  <div id="loginModal" class="modal-backdrop">
    <div class="modal">
      <h3>로그인</h3>
      <div id="gBtn" style="display:flex;justify-content:center;margin-bottom:8px"></div>
      <div class="small muted" style="text-align:center;margin-bottom:8px">Google 계정으로 로그인합니다.</div>
      <button class="btn" style="width:100%;margin-top:4px" onclick="hideLogin()">닫기</button>
    </div>
  </div>

  <!-- SETTINGS MODAL -->
  <div id="settingsModal" class="modal-backdrop">
    <div class="modal">
      <h3>설정</h3>
      <div class="row"><span class="chip">GitHub Pages</span><span class="small muted">https://shibukl321.github.io</span></div>
      <div class="row">
        <label class="chip" for="clientInput">Google Client ID</label>
        <input id="clientInput" placeholder="YOUR_CLIENT_ID.apps.googleusercontent.com" />
      </div>
      <div class="row">
        <button class="btn primary" id="saveClient">저장</button>
        <button class="btn" id="closeSettings">닫기</button>
      </div>
      <div class="small muted">※ A방식(정적파일)일 때는 보통 여기를 수정할 필요가 없습니다. 관리자만 접근 가능하며, 파일 수정으로 공통 반영됩니다.</div>
    </div>
  </div>

  <div id="slideshow" class="slideshow"><img id="slideImg" class="slide-inner" alt="fanart" /><button class="btn" id="closeSlide" style="position:fixed;top:16px;right:16px">닫기 ✕</button></div>

  <script>
    /* ===================== GLOBAL CONFIG ===================== */
    window.CONFIG = {
      X_API: localStorage.getItem('xProxyBase') || '', // 예: https://<worker-domain>
      DAILY_LIMIT: 3,
      IMAGE_MIN: {w:800,h:800},
      GOOGLE_CLIENT_ID: localStorage.getItem('google_client_id') || (document.querySelector('meta[name="google-signin-client_id"]')?.content || 'YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com')
    };
    // 기본 관리자(정적 파일이 없을 때 폴백)
    window.ADMIN_EMAILS = ['qw0907qw@gmail.com'];

    /* ===================== 정적 설정 로더 (A 방식) ===================== */
    async function loadStaticConfig(){
      try{
        const cfgUrl = new URL('./config/app-config.json', location.href).href;
        const res = await fetch(cfgUrl, {cache:'no-store'});
        if(!res.ok) { console.warn('app-config.json not found', res.status); return; }
        const cfg = await res.json();
        window.STATIC_CFG = cfg;
        if(Array.isArray(cfg.adminEmails) && cfg.adminEmails.length){
          window.ADMIN_EMAILS = cfg.adminEmails.map(e => (e||'').toLowerCase());
        }
        if(cfg.googleClientId) window.CONFIG.GOOGLE_CLIENT_ID = cfg.googleClientId;
        if(cfg.xProxyBase)     window.CONFIG.X_API          = cfg.xProxyBase;
      }catch(e){ console.warn('app-config.json load failed', e); }
      // 초기에는 관리자 UI 숨김 (로그인 시 권한 체크 후 노출)
      ['settingsBtn','toggleAdmin','uploadLabel','tweetAdder'].forEach(id=>{ const el=document.getElementById(id); if(el) el.style.display='none'; });
    }
    function afterLoginAdminGate(profile){
      const email = (profile?.email || '').toLowerCase();
      const isAdmin = Array.isArray(window.ADMIN_EMAILS) && window.ADMIN_EMAILS.includes(email);
      const show = v => v ? 'inline-flex' : 'none';
      const sb = document.getElementById('settingsBtn'); if(sb) sb.style.display = show(isAdmin);
      const ap = document.getElementById('adminPanel'); if(ap) ap.classList.toggle('hide', !isAdmin);
      const tb = document.getElementById('toggleAdmin'); if(tb) tb.style.display = show(isAdmin);
      const ul = document.getElementById('uploadLabel'); if(ul) ul.style.display = show(isAdmin);
      const ta = document.getElementById('tweetAdder'); if(ta) ta.style.display = isAdmin ? 'flex' : 'none';
      // 관리자 아니면 설정 입력 비활성
      const ci = document.getElementById('clientInput');
      const sc = document.getElementById('saveClient');
      if(ci && sc){ if(!isAdmin){ ci.setAttribute('disabled','disabled'); sc.setAttribute('disabled','disabled'); } else { ci.removeAttribute('disabled'); sc.removeAttribute('disabled'); } }
    }

    /* ===================== UTILITIES ===================== */
    const $ = sel => document.querySelector(sel);
    const $$ = sel => Array.from(document.querySelectorAll(sel));
    function switchTab(id){
      $$("nav.tabs button").forEach(b=>b.classList.toggle('active', b.dataset.tab===id));
      $$("main > .section").forEach(sec=>sec.classList.toggle('hide', sec.id!==id));
      if(id==='gallery' && window.twttr){ setTimeout(()=>twttr.widgets.load(), 150); }
      if(id==='favorites') renderFavorites();
      if(id==='vote') renderVote();
    }
    $$("nav.tabs button").forEach(btn=>btn.addEventListener('click', ()=>switchTab(btn.dataset.tab)));

    // Theme
    $('#themeToggle').addEventListener('click', ()=>{
      const light = document.body.getAttribute('data-theme')==='light';
      document.body.setAttribute('data-theme', light? 'dark':'light');
    });

    // ===== Settings Modal =====
    const settingsModal = $('#settingsModal');
    function openSettings(){ $('#clientInput').value = window.CONFIG.GOOGLE_CLIENT_ID || ''; settingsModal.style.display='flex'; }
    function closeSettings(){ settingsModal.style.display='none'; }
    $('#settingsBtn').addEventListener('click', openSettings);
    $('#closeSettings').addEventListener('click', closeSettings);
    $('#saveClient').addEventListener('click', ()=>{
      const v = $('#clientInput').value.trim(); if(!v || !/\.apps\.googleusercontent\.com$/.test(v)) return alert('올바른 Client ID를 입력하세요');
      localStorage.setItem('google_client_id', v); window.CONFIG.GOOGLE_CLIENT_ID = v; initGoogle(true); closeSettings(); alert('Client ID 저장 및 적용 완료');
    });

    /* ===================== GOOGLE SIGN-IN (GIS) ===================== */
    let GIS_READY = false;
    function decodeJwt(token){ try{ const p=token.split('.')[1]; const b64=p.replace(/-/g,'+').replace(/_/g,'/'); const json = decodeURIComponent(atob(b64).split('').map(c=>'%'+('00'+c.charCodeAt(0).toString(16)).slice(-2)).join('')); return JSON.parse(json);}catch(e){return null;} }
    function handleCredentialResponse(res){
      const idt = res?.credential; if(!idt) return alert('로그인 토큰을 받지 못했습니다.');
      const p = decodeJwt(idt); if(!p) return alert('ID 토큰 파싱 실패');
      const uid = 'google:'+p.sub;
      localStorage.setItem('user', uid);
      localStorage.setItem('userProfile', JSON.stringify({provider:'google', sub:p.sub, email:p.email, name:p.name||p.given_name||'사용자', picture:p.picture||'', iss:p.iss}));
      initUser(); hideLogin();
    }
    function initGoogle(force){
      if(!window.google || !google.accounts || !google.accounts.id) return;
      if(GIS_READY && !force) return; GIS_READY = true;
      const cid = window.CONFIG.GOOGLE_CLIENT_ID;
      if(!cid || cid.startsWith('YOUR_GOOGLE_CLIENT_ID')) return; // 아직 설정 안됨
      try{
        google.accounts.id.initialize({
          client_id: cid,
          callback: handleCredentialResponse,
          auto_select: false,
          ux_mode: (window.GIS_UX || 'popup'),
          context: 'signin'
        });
        const target = document.getElementById('gBtn');
        if(target){
          target.innerHTML = '';
          google.accounts.id.renderButton(target, {
            type:'standard', theme: (document.body.getAttribute('data-theme')==='light'?'outline':'filled_blue'),
            size:'large', shape:'pill', text:'signin_with'
          });
        }
        google.accounts.id.prompt();
      }catch(e){ console.warn('GIS init error', e); }
    }
    function waitGis(){ if(window.google && google.accounts && google.accounts.id){ initGoogle(); } else { setTimeout(waitGis, 120); } }

    /* ===================== USER (로그인/로그아웃 UI) ===================== */
    function showLogin(){
      const cid = window.CONFIG.GOOGLE_CLIENT_ID;
      if(!cid || cid.startsWith('YOUR_GOOGLE_CLIENT_ID')){ alert('관리자가 아직 Client ID를 설정하지 않았습니다.'); return; }
      $('#loginModal').style.display='flex'; if(GIS_READY) initGoogle(true);
    }
    function hideLogin(){ $('#loginModal').style.display='none'; }
    function signOut(){
      try{
        const prof = JSON.parse(localStorage.getItem('userProfile')||'null');
        if(prof?.email && window.google?.accounts?.id){ google.accounts.id.disableAutoSelect(); google.accounts.id.revoke(prof.email, ()=>{}); }
      }catch(e){}
      localStorage.removeItem('user'); localStorage.removeItem('userProfile');
      initUser();
    }
    $('#loginBtn').onclick=showLogin;
    function initUser(){
      const uid = localStorage.getItem('user');
      const prof = JSON.parse(localStorage.getItem('userProfile')||'null');
      if(uid && prof){
        const badge = `<img src="${prof.picture||''}" alt="" onerror="this.style.display='none'"/> <span>${prof.name||'사용자'}</span>`;
        $('#userName').innerHTML = badge;
        $('#loginBtn').textContent = '로그아웃';
        $('#loginBtn').onclick = signOut;
        afterLoginAdminGate(prof);
      } else {
        $('#userName').textContent = '게스트';
        $('#loginBtn').textContent = '로그인';
        $('#loginBtn').onclick = showLogin;
        afterLoginAdminGate(null);
      }
    }

    /* ===================== HERO CANVAS ===================== */
    (function hero(){
      const c = document.getElementById('heroCanvas'); if(!c) return; const ctx=c.getContext('2d');
      const dots = Array.from({length:60},()=>({x:Math.random()*c.width,y:Math.random()*c.height,r:1+Math.random()*2,dx:(Math.random()-.5)*.6,dy:(Math.random()-.5)*.6}));
      (function draw(){ ctx.clearRect(0,0,c.width,c.height); dots.forEach(d=>{ ctx.fillStyle='rgba(255,255,255,.15)'; ctx.beginPath(); ctx.arc(d.x,d.y,d.r,0,Math.PI*2); ctx.fill(); d.x+=d.dx; d.y+=d.dy; if(d.x<0||d.x>c.width) d.dx*=-1; if(d.y<0||d.y>c.height) d.dy*=-1;}); requestAnimationFrame(draw); })();
    })();

    /* ===================== DATA (Members & Tags) ===================== */
    const MEMBERS = [
      // STELLIVE (10)
      {id:'airi',     name:'아이리 칸나', group:'STELLIVE', platform:'youtube', stream:'https://www.youtube.com/@hebich/streams', tags:['Kanart']},
      {id:'ayatsuno', name:'아야츠노 유니', group:'STELLIVE', platform:'chzzk',  stream:'https://chzzk.naver.com/45e71a76e949e16a34764deb962f9d9f', tags:['yunyart']},
      {id:'shirayuki',name:'시라유키 히나', group:'STELLIVE', platform:'chzzk',  stream:'https://chzzk.naver.com/b044e3a3b9259246bc92e863e7d3f3b8', tags:['_hinart','shiroart']},
      {id:'neneko',   name:'네네코 마시로', group:'STELLIVE', platform:'chzzk',  stream:'https://chzzk.naver.com/4515b179f86b67b4981e16190817c580', tags:['shiroart']},
      {id:'akane',    name:'아카네 리제',   group:'STELLIVE', platform:'chzzk',  stream:'https://chzzk.naver.com/4325b1d5bbc321fad3042306646e2e50', tags:['Lize_art']},
      {id:'arahashi', name:'아라하시 타비', group:'STELLIVE', platform:'chzzk',  stream:'https://chzzk.naver.com/a6c4ddb09cdb160478996007bff35296', tags:['Tabiart']},
      {id:'tenko',    name:'텐코 시부키',   group:'STELLIVE', platform:'chzzk',  stream:'https://chzzk.naver.com/64d76089fba26b180d9c9e48a32600d9', tags:['shibuki_art']},
      {id:'aokumo',   name:'아오쿠모 린',   group:'STELLIVE', platform:'chzzk',  stream:'https://chzzk.naver.com/516937b5f85cbf2249ce31b0ad046b0f', tags:['kumorinart']},
      {id:'hanako',   name:'하나코 나나',   group:'STELLIVE', platform:'chzzk',  stream:'https://chzzk.naver.com/4d812b586ff63f8a2946e64fa860bbf5', tags:['Nanart_']},
      {id:'yuzuha',   name:'유즈하 리코',   group:'STELLIVE', platform:'chzzk',  stream:'https://chzzk.naver.com/8fd39bb8de623317de90654718638b10', tags:['riko_art']},
      // ISEGYE (6)
      {id:'jingburger',name:'징버거', group:'ISEGYE', platform:'soop', stream:'https://ch.sooplive.co.kr/jingburger1', tags:['징버거']},
      {id:'aine',     name:'아이네',  group:'ISEGYE', platform:'soop', stream:'https://ch.sooplive.co.kr/inehine',    tags:['아이네']},
      {id:'lilpa',    name:'릴파',   group:'ISEGYE', platform:'soop', stream:'https://ch.sooplive.co.kr/lilpa0309',   tags:['릴파']},
      {id:'viichan',  name:'비챤',   group:'ISEGYE', platform:'soop', stream:'https://ch.sooplive.co.kr/viichan6',    tags:['비챤']},
      {id:'jururu',   name:'주르르', group:'ISEGYE', platform:'soop', stream:'https://ch.sooplive.co.kr/cotton1217',  tags:['주르르']},
      {id:'gosegu',   name:'고세구', group:'ISEGYE', platform:'soop', stream:'https://ch.sooplive.co.kr/gosegu2',     tags:['고세구']},
    ];

    const TAGS = {
      STELLIVE:['Kanart','yunyart','_hinart','shiroart','Tabiart','Lize_art','kumorinart','Nanart_','riko_art','shibuki_art'],
      ISEGYE:['고세구','릴파','비챤','아이네','주르르','징버거']
    };

    // ===== 커버 재생목록 (전원 반영) =====
    const PLAYLISTS = [
      // STELLIVE
      {member:'yuzuha',   name:'리코 커버곡',   list:'PL_D2YrKeYY2UvRIw_SW3lQXzBDO7aBeii'},
      {member:'tenko',    name:'부키 커버곡',   list:'PLKVNBOcsLJlVii-8YwoZTD3o4gh5CnIND'},
      {member:'hanako',   name:'나나 커버곡',   list:'PLJWmDIpvwe7Cri29xtAyQXLC1RLwOChpA'},
      {member:'shirayuki',name:'히나 커버곡',   list:'PLzdLDJsHzz2NiuwjyW6QgSck4PrwlSyOc'},
      {member:'airi',     name:'칸나 커버곡',   list:'PLOPBV2KAIYnt1NJ0QCkfCqMRc00lfcjFa'},
      {member:'akane',    name:'리제 커버곡',   list:'PL-DHk0WpiRNSM5oI19ImJ8sSV65mnGseX'},
      {member:'ayatsuno', name:'유니 커버곡',   list:'PL3HtH_xx9h_7ZGoZ9zMUQ-MPumwe21_cc'},
      {member:'arahashi', name:'타비 커버곡',   list:'PLbIDsfX2JRA0oawGN209gpd_nz9IMvUlb'},
      {member:'neneko',   name:'마시로 커버곡', list:'PLWwhuXFHGLvhgZZb5_rmQEMI1B0ysKJxG'},
      {member:'aokumo',   name:'린 커버곡',     list:'PLSDRWR15h-o4uWNeoLv0upOUUGj12f-yU'},
      // ISEGYE
      {member:'gosegu',    name:'고세구 커버곡',  list:'PLZNwpHxpI4EjDSv3v_HY7udxDEqj4C7PL'},
      {member:'jururu',    name:'주르르 커버곡',  list:'PLqE7uvTHaH31Wl8lCe3SYslZvoCnTD-JS'},
      {member:'viichan',   name:'비챤 커버곡',    list:'PLhaJuLneKo5FdYnMZ1Jc5BaV7y26KvmD1'},
      {member:'jingburger',name:'징버거 커버곡',  list:'PLio0a5EPF6j099Af5uBaK6V25RtTvK4kq'},
      {member:'lilpa',     name:'릴파 커버곡',    list:'PLLPGQs-RNQXnFl55WissjQylZbInOK81P'},
      {member:'aine',      name:'아이네 커버곡',  list:'PLJWTWXJ7iqXctxVu1Fd3ZkF-WWD8kOzMb'},
    ].map(p=>({ ...p, url:`https://www.youtube.com/embed/videoseries?list=${p.list}` }));

    // Vote & Live keys
    const VOTE_KEY = 'votes-v1';
    const PERIOD = (()=>{ const d=new Date(); return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}`; })();
    const VOTED_KEY = 'voted-v1-' + PERIOD; // flag
    const MYVOTE_KEY = 'myvote-v1-' + PERIOD; // memberId
    const LIVE_KEY = 'live-override'; // { memberId: true }

    /* ===================== FAVORITES (multi) ===================== */
    function getUser(){ return localStorage.getItem('user') || 'guest'; }
    function favSetGet(){
      const user = getUser();
      let map = {}; try{ map = JSON.parse(localStorage.getItem('favSetMap')||'{}'); }catch{}
      try{ const old = JSON.parse(localStorage.getItem('favMap')||'{}'); if(old[user] && (!map[user] || !Array.isArray(map[user]))){ map[user] = [old[user]]; localStorage.setItem('favSetMap', JSON.stringify(map)); } }catch{}
      return new Set(map[user]||[]);
    }
    function favSetSave(set){ const user = getUser(); let map={}; try{ map=JSON.parse(localStorage.getItem('favSetMap')||'{}'); }catch{} map[user]=[...set]; localStorage.setItem('favSetMap', JSON.stringify(map)); }
    function isFav(id){ return favSetGet().has(id); }
    function toggleFav(id){ const set=favSetGet(); set.has(id)? set.delete(id): set.add(id); favSetSave(set); renderMembers(); renderFavorites(); }

    /* ===================== MEMBERS ===================== */
    let currentGroup = 'STELLIVE';
    const favOnlyBtn = document.getElementById('favOnlyBtn');
    let favOnly = false;

    function initials(name){ return name.split(/\s|·/).map(s=>s[0]).join('').slice(0,2); }

    async function fetchChzzkProfile(m){
      try{
        const id = m.stream.split('/').pop();
        const res = await fetch(`https://api.chzzk.naver.com/service/v1/channels/${id}`);
        if(!res.ok) return; const json = await res.json();
        m.pfp = json?.content?.channelImageUrl || m.pfp;
      }catch(e){}
    }

    function memberCard(m){
      const liveMap = JSON.parse(localStorage.getItem(LIVE_KEY)||'{}');
      const live = !!liveMap[m.id];
      const card = document.createElement('div'); card.className='card';
      const pfp = m.pfp ? `<img src="${m.pfp}" alt="${m.name}"/>` : initials(m.name);
      const fav = isFav(m.id);
      card.innerHTML = `
        <div class="row">
          <div class="pfp" aria-hidden="true">${pfp}</div>
          <div style="flex:1">
            <div style="display:flex;align-items:center;gap:6px;flex-wrap:wrap">
              <strong>${m.name}</strong>
              <span class="badge">${m.group}</span>
              <span class="badge">${m.platform.toUpperCase()}</span>
              <span class="live-dot ${live?'on':''}" title="${live?'방송 중':'오프라인'}"></span>
            </div>
            <div class="muted" style="font-size:.9rem;margin-top:2px">#${(m.tags||[]).slice(0,3).join(' #')}</div>
          </div>
          <button class="fav" title="최애로 설정">${fav?'💖':'🤍'}</button>
        </div>
        <div class="actions">
          <a class="btn primary" href="${m.stream}" target="_blank" rel="noopener noreferrer">채널 방문</a>
          <button class="btn" data-action="fanart">팬아트</button>
          <button class="btn" data-action="covers">커버곡</button>
        </div>`;
      card.querySelector('.fav').onclick = ()=> toggleFav(m.id);
      card.querySelector('[data-action=fanart]').onclick = ()=>{ switchTab('gallery'); setGallerySelection(m); };
      card.querySelector('[data-action=covers]').onclick = ()=>{ switchTab('cover'); setCoverSelection(m); };
      return card;
    }

    async function renderMembers(){
      $$(".group-switch [data-group]").forEach(b=>{ const on = b.dataset.group===currentGroup; b.classList.toggle('primary', on); });
      document.body.className = currentGroup==='ISEGYE' ? 'theme-ISEGYE' : 'theme-STELLIVE';

      const q = ($('#memberSearch').value||'').trim().toLowerCase();
      let list = MEMBERS.filter(m=>m.group===currentGroup);
      if(q){ list = list.filter(m=> m.name.toLowerCase().includes(q) || (m.tags||[]).join(',').toLowerCase().includes(q) ); }
      if(favOnly){ const set=favSetGet(); list = list.filter(m=>set.has(m.id)); }

      const sort = $('#sortSelect').value; const set=favSetGet();
      list.sort((a,b)=>{
        if(sort==='name') return a.name.localeCompare(b.name,'ko');
        const af = set.has(a.id)?-1:0, bf=set.has(b.id)?-1:0; if(af!==bf) return af-bf; return a.name.localeCompare(b.name,'ko');
      });

      const wrap = $('#memberList'); wrap.innerHTML='';
      await Promise.all(list.filter(m=>m.platform==='chzzk' && !m.pfp).map(fetchChzzkProfile));
      list.forEach(m=> wrap.appendChild(memberCard(m)));
      updateLiveBanner();
    }
    $$(".group-switch [data-group]").forEach(btn=>btn.addEventListener('click', ()=>{ currentGroup=btn.dataset.group; renderMembers(); renderVote(); populateGalleryMembers(); }));
    $('#memberSearch').addEventListener('input', renderMembers);
    $('#sortSelect').addEventListener('change', renderMembers);
    $('#favOnlyBtn').addEventListener('click', ()=>{ favOnly=!favOnly; $('#favOnlyBtn').classList.toggle('primary', favOnly); renderMembers(); });

    function renderFavorites(){
      const set = favSetGet();
      const list = MEMBERS.filter(m=>set.has(m.id));
      const grid = $('#favGrid'); const empty = $('#favEmpty');
      grid.innerHTML='';
      if(!list.length){ empty.classList.remove('hide'); return; } else { empty.classList.add('hide'); }
      list.sort((a,b)=> (a.group===b.group? a.name.localeCompare(b.name,'ko') : a.group.localeCompare(b.group)) );
      list.forEach(m=> grid.appendChild(memberCard(m)));
    }

    /* ===================== GALLERY ===================== */
    const GALLERY_KEY = 'gallery-manual-v1';
    const PIN_KEY = 'gallery-pin-v1'; // { YYYY-MM-DD: { tag: {src,href} } }
    function todayStr(){ const d=new Date(); const y=d.getFullYear(); const m=String(d.getMonth()+1).padStart(2,'0'); const day=String(d.getDate()).padStart(2,'0'); return `${y}-${m}-${day}`; }
    function galleryGet(){ try{return JSON.parse(localStorage.getItem(GALLERY_KEY)||'[]');}catch{return []} }
    function gallerySet(arr){ localStorage.setItem(GALLERY_KEY, JSON.stringify(arr.slice(0,200))); }
    function pinGet(){ try{return JSON.parse(localStorage.getItem(PIN_KEY)||'{}');}catch{return {} } }
    function pinSet(map){ localStorage.setItem(PIN_KEY, JSON.stringify(map)); }

    function populateGalleryTags(){
      const grp = $('#galleryGroup').value;
      const select = $('#galleryTag'); select.innerHTML='';
      const tags = grp==='ALL' ? [...TAGS.STELLIVE, ...TAGS.ISEGYE] : TAGS[grp];
      ['(태그 선택)'].concat(tags).forEach(t=>{ const op=document.createElement('option'); op.value=t==='(태그 선택)'?'':t; op.textContent=t; select.appendChild(op); });
    }
    function populateGalleryMembers(){
      const grp = $('#galleryGroup').value;
      const sel = $('#galleryMember'); sel.innerHTML = '<option value="">(멤버 선택)</option>';
      const list = (grp==='ALL'? MEMBERS : MEMBERS.filter(m=>m.group===grp));
      list.forEach(m=>{ const op=document.createElement('option'); op.value=m.id; op.textContent=`${m.group==='STELLIVE'?'[ST]':'[IS]'} ${m.name}`; sel.appendChild(op); });
    }

    $('#galleryMember').addEventListener('change', ()=>{
      const id = $('#galleryMember').value; if(!id) return;
      const m = MEMBERS.find(x=>x.id===id); if(!m) return;
      $('#galleryGroup').value = m.group; populateGalleryTags(); populateGalleryMembers();
      const firstTag = (m.tags && m.tags[0]) || ''; $('#galleryTag').value = firstTag; renderGallery();
    });

    function seededShuffle(arr, seed){
      function toSeed(s){ let h=2166136261>>>0; for(let i=0;i<s.length;i++){ h^=s.charCodeAt(i); h=Math.imul(h,16777619); } return h>>>0; }
      let x = toSeed(seed)||123456789; const a=[...arr];
      for(let i=a.length-1;i>0;i--){ x^=x<<13; x^=x>>>17; x^=x<<5; const j = Math.abs(x) % (i+1); [a[i],a[j]]=[a[j],a[i]]; }
      return a;
    }

    async function fetchProxyImages(tag, max=36){
      const base = window.CONFIG.X_API?.replace(/\/$/,''); if(!base) return [];
      try{
        const url = `${base}/images?tag=${encodeURIComponent(tag)}&max=${max}`;
        const res = await fetch(url,{mode:'cors'});
        if(!res.ok) throw new Error('X proxy '+res.status);
        const json = await res.json(); // [{src, href, width, height}]
        const minW = window.CONFIG.IMAGE_MIN.w, minH = window.CONFIG.IMAGE_MIN.h;
        return (json||[]).filter(it=> (it.width||0)>=minW && (it.height||0)>=minH);
      }catch(e){ console.warn(e); return []; }
    }

    async function dailyImagesFor(tag){
      const date = todayStr();
      const cacheKey = `x-daily-${date}-${tag}`;
      try{ const cached = JSON.parse(sessionStorage.getItem(cacheKey)||'null'); if(cached && Array.isArray(cached)) return cached; }catch{}
      let imgs = await fetchProxyImages(tag, 60);
      const seed = `${date}|${tag}`;
      imgs = seededShuffle(imgs, seed).slice(0, window.CONFIG.DAILY_LIMIT);
      sessionStorage.setItem(cacheKey, JSON.stringify(imgs));
      return imgs;
    }

    function renderTimelineFallback(tag){
      const grid = $('#galleryGrid');
      const a=document.createElement('a'); a.className='twitter-timeline tweet'; a.href=`https://twitter.com/hashtag/${encodeURIComponent(tag)}`; a.setAttribute('data-chrome','noheader nofooter noborders transparent'); a.setAttribute('data-dnt','true'); a.textContent=`#${tag} from X`;
      grid.appendChild(a);
      if(window.twttr){ setTimeout(()=>twttr.widgets.load(), 50); }
    }

    async function renderGallery(){
      const grp = $('#galleryGroup').value; const tag = $('#galleryTag').value; const grid=$('#galleryGrid'); grid.innerHTML='';

      // 수동 업로드/트윗(관리자 입력) 전시
      const manual = galleryGet();
      manual.forEach(item=>{
        if(item.type==='img'){
          const tile=document.createElement('div'); tile.className='tile'; tile.innerHTML=`<img src="${item.data}" alt="fanart"/>`; grid.appendChild(tile);
        } else if(item.type==='tweet'){
          const ifr=document.createElement('iframe'); ifr.className='grid-img'; ifr.src=`https://twitframe.com/show?url=${encodeURIComponent(item.url)}`; ifr.loading='lazy'; grid.appendChild(ifr);
        }
      });

      if(tag){
        const pin = pinGet()[todayStr()]?.[tag];
        const hint = document.createElement('div'); hint.className='muted small'; hint.textContent = window.CONFIG.X_API? `#${tag} 이미지 로딩중…` : `프록시가 없어 타임라인으로 표시합니다.`; grid.appendChild(hint);
        if(window.CONFIG.X_API){
          const imgs = await dailyImagesFor(tag);
          grid.innerHTML='';
          if(pin && pin.src){
            const p=document.createElement('div'); p.className='tile'; p.innerHTML=`<img src="${pin.src}" alt="#${tag} fanart"/><a href="${pin.href||'#'}" target="_blank" rel="noopener"></a>`; grid.appendChild(p);
          }
          if(!imgs.length){
            const em=document.createElement('div'); em.className='muted small'; em.textContent='이미지를 찾지 못했습니다. 타임라인을 표시합니다.'; grid.appendChild(em);
            renderTimelineFallback(tag);
            return;
          }
          imgs.forEach(it=>{ const tile=document.createElement('div'); tile.className='tile'; tile.innerHTML=`<img src="${it.src}" alt="#${tag} fanart"/><a href="${it.href}" target="_blank" rel="noopener"></a>`; grid.appendChild(tile); });
        } else {
          renderTimelineFallback(tag);
        }
        return;
      }

      const tags = grp==='ALL'? [...TAGS.STELLIVE, ...TAGS.ISEGYE] : TAGS[grp];
      (tags.slice(0,6)).forEach(t=> renderTimelineFallback(t));
    }

    $('#toggleAdmin').addEventListener('click', ()=>{ $('#adminPanel').classList.toggle('hide'); });
    $('#saveProxy').addEventListener('click', ()=>{ const v=$('#xProxyInput').value.trim(); localStorage.setItem('xProxyBase', v); window.CONFIG.X_API=v; alert('프록시 URL을 저장했습니다.'); });
    $('#savePin').addEventListener('click', ()=>{
      const tag=$('#galleryTag').value; if(!tag) return alert('먼저 태그를 선택하세요.');
      const src=$('#pinImg').value.trim(); if(!src) return alert('이미지 URL을 입력하세요.');
      const href=$('#pinHref').value.trim(); const map=pinGet(); const day=todayStr(); map[day]=map[day]||{}; map[day][tag]={src,href}; pinSet(map); alert('오늘 고정 이미지를 저장했습니다.'); renderGallery();
    });
    $('#clearPin').addEventListener('click', ()=>{ const tag=$('#galleryTag').value; const map=pinGet(); const day=todayStr(); if(map[day]&&map[day][tag]){ delete map[day][tag]; pinSet(map); renderGallery(); }});

    $('#imageUpload').addEventListener('change', (e)=>{
      const files=[...e.target.files].slice(0,30);
      const jobs = files.map(f=> new Promise(res=>{ const r=new FileReader(); r.onload=()=>res(r.result); r.readAsDataURL(f); }));
      Promise.all(jobs).then(datas=>{ const arr=galleryGet(); datas.forEach(d=>arr.unshift({type:'img',data:d})); gallerySet(arr); renderGallery(); e.target.value=''; });
    });
    $('#addTweetBtn').addEventListener('click', ()=>{
      const url=$('#tweetUrlInput').value.trim(); if(!/^https?:\/\/(x|twitter)\.com\//i.test(url)) return alert('올바른 트윗 URL을 입력하세요');
      const arr=galleryGet(); arr.unshift({type:'tweet',url}); gallerySet(arr); $('#tweetUrlInput').value=''; renderGallery();
    });

    $('#openSlideshow').addEventListener('click', ()=>{
      const imgs = Array.from(document.querySelectorAll('#galleryGrid img'));
      if(!imgs.length) return alert('이미지 업로드 또는 프록시 설정 후 이용하세요.');
      let idx=0; const modal=$('#slideshow'); const viewer=$('#slideImg');
      function show(){ viewer.src=imgs[idx].src; modal.classList.add('show'); }
      modal.onclick = (e)=>{ if(e.target.id==='slideshow' || e.target.id==='closeSlide') modal.classList.remove('show'); };
      document.onkeydown = (e)=>{ if(!modal.classList.contains('show')) return; if(e.key==='ArrowRight') idx=(idx+1)%imgs.length; if(e.key==='ArrowLeft') idx=(idx-1+imgs.length)%imgs.length; if(e.key==='Escape') modal.classList.remove('show'); show(); };
      show();
    });

    $('#galleryGroup').addEventListener('change', ()=>{ populateGalleryTags(); populateGalleryMembers(); renderGallery(); });
    $('#galleryTag').addEventListener('change', renderGallery);
    $('#reloadGallery').addEventListener('click', renderGallery);

    /* ===================== COVER SONGS ===================== */
    function populateCoverMembers(){
      const sel=$('#coverMember'); sel.innerHTML='';
      MEMBERS.forEach(m=>{ const op=document.createElement('option'); op.value=m.id; op.textContent=`${m.group==='STELLIVE'?'[ST]':'[IS]'} ${m.name}`; sel.appendChild(op); });
      if(sel.options.length) sel.value = MEMBERS[0].id;
    }
    function setCoverSelection(m){ const opt = Array.from($('#coverMember').options).find(o=>o.value===m.id); if(opt){ $('#coverMember').value=m.id; renderCover(); } }
    function renderCover(){
      const id=$('#coverMember').value; const view=$('#coverView').value; const m = MEMBERS.find(x=>x.id===id) || MEMBERS[0];
      const wrap=$('#coverContent'); wrap.innerHTML='';
      const pl = PLAYLISTS.find(p=>p.member===m.id);
      if(view==='playlist' && pl){
        const ifr=document.createElement('iframe'); ifr.className='cover-embed'; ifr.src=pl.url; ifr.allowFullscreen=true; ifr.loading='lazy'; wrap.appendChild(ifr);
        const cap=document.createElement('div'); cap.className='muted small'; cap.style.marginTop='6px'; cap.textContent=pl.name; wrap.appendChild(cap);
        return;
      }
      const em=document.createElement('div'); em.className='muted small'; em.textContent='이 멤버는 재생목록 보기만 지원합니다.'; wrap.appendChild(em);
    }
    $('#coverMember')?.addEventListener('change', renderCover);
    $('#coverView')?.addEventListener('change', renderCover);

    function setGallerySelection(m){
      $('#galleryGroup').value = m.group; populateGalleryTags(); populateGalleryMembers();
      $('#galleryMember').value = m.id;
      const firstTag = (m.tags && m.tags[0]) || '';
      $('#galleryTag').value = firstTag;
      renderGallery();
    }

    /* ===================== LOG & CONFESSION (with delete) ===================== */
    function arrGet(k){ try{return JSON.parse(localStorage.getItem(k)||'[]');}catch{return []} }
    function arrSet(k,v){ localStorage.setItem(k, JSON.stringify(v)); }
    function arrPush(k,v){ const a=arrGet(k); a.unshift(v); arrSet(k,a); return a; }
    function renderList(k,el){
      const arr = arrGet(k); el.innerHTML='';
      if(!arr.length){ const li=document.createElement('li'); li.innerHTML='<span class="muted">아직 항목이 없습니다.</span>'; el.appendChild(li); return; }
      arr.forEach((t,i)=>{ const li=document.createElement('li'); li.innerHTML=`<span>${t}</span><button class="btn" data-del="${i}">삭제</button>`; el.appendChild(li); });
      el.querySelectorAll('[data-del]').forEach(btn=> btn.addEventListener('click', ()=>{ const idx=+btn.getAttribute('data-del'); const a=arrGet(k); a.splice(idx,1); arrSet(k,a); renderList(k,el); }));
    }
    $('#logForm').addEventListener('submit',e=>{ e.preventDefault(); const v=$('#logInput').value.trim(); if(!v) return; $('#logInput').value=''; renderList('logs', (arrPush('logs', v), $('#logList')) ); });
    $('#confForm').addEventListener('submit',e=>{ e.preventDefault(); const v=$('#confInput').value.trim(); if(!v) return; $('#confInput').value=''; renderList('confs', (arrPush('confs', v), $('#confList')) ); });

    /* ===================== VOTE (monthly 1 vote / ALL or group) ===================== */
    function votePeriodLabel(){ const d=new Date(); const y=d.getFullYear(), m=d.getMonth()+1; const last=new Date(y,m,0).getDate(); return `${y}.${String(m).padStart(2,'0')}.01 - ${y}.${String(m).padStart(2,'0')}.${last}`; }
    function renderVote(){
      $('#votePeriod').textContent = votePeriodLabel();
      const scope = $('#voteScope').value;
      const wrap=$('#voteForm'); wrap.innerHTML='';
      const voted = localStorage.getItem(VOTED_KEY);
      const list = scope==='ALL'? MEMBERS : MEMBERS.filter(m=>m.group===scope);
      list.forEach(m=>{
        const label=document.createElement('label');
        label.innerHTML=`<input type="radio" name="vote" value="${m.id}" ${voted?'disabled':''}/> ${m.name}`;
        wrap.appendChild(label);
      });
      const btn=document.createElement('button'); btn.className='btn primary'; btn.textContent=voted?'이번 달 투표 완료':'투표'; btn.disabled=!!voted;
      btn.onclick=()=>{
        const sel=document.querySelector('input[name=vote]:checked'); if(!sel) return alert('멤버를 선택하세요');
        const map = JSON.parse(localStorage.getItem(VOTE_KEY)||'{}'); map[sel.value] = (map[sel.value]||0)+1; localStorage.setItem(VOTE_KEY, JSON.stringify(map)); localStorage.setItem(VOTED_KEY,'1'); localStorage.setItem(MYVOTE_KEY, sel.value); drawChart(); renderVote(); };
      wrap.appendChild(btn);
      drawChart();
    }
    function drawChart(){
      const scope = $('#voteScope').value;
      const ctx=document.getElementById('chart').getContext('2d');
      const map = JSON.parse(localStorage.getItem(VOTE_KEY)||'{}');
      const list = scope==='ALL'? MEMBERS : MEMBERS.filter(m=>m.group===scope);
      const labels = list.map(m=>m.name);
      const data = list.map(m=> map[m.id]||0 );
      if(window._chart) window._chart.destroy();
      window._chart = new Chart(ctx,{ type:'bar', data:{ labels, datasets:[{ label:'득표수', data }] }, options:{ plugins:{legend:{display:false}}, scales:{y:{beginAtZero:true}} } });
    }
    $('#voteScope').addEventListener('change', ()=>{ renderVote(); });
    $('#myVoteBtn').addEventListener('click', ()=>{
      const id = localStorage.getItem(MYVOTE_KEY);
      if(!id) return alert('아직 이번 달에 투표하지 않았습니다.');
      const m = MEMBERS.find(x=>x.id===id); alert(`이번 달 내 투표: ${m? m.name : id}`);
    });

    /* ===================== LIVE (CHZZK auto + fallback manual) ===================== */
    function chzzkIdFromUrl(u){ try{ const s=new URL(u); return s.hostname.includes('chzzk')? s.pathname.replace('/',''): null; }catch{ return null; } }
    async function checkLive(){
      const liveMap = JSON.parse(localStorage.getItem(LIVE_KEY)||'{}');
      const targets = MEMBERS.filter(m=>m.platform==='chzzk');
      await Promise.all(targets.map(async m=>{
        const cid = chzzkIdFromUrl(m.stream); if(!cid) return;
        try{
          const res = await fetch(`https://api.chzzk.naver.com/service/v1/channels/${cid}/live-detail`);
          if(!res.ok) return; const json = await res.json();
          const status = json?.content?.status || json?.content?.liveStatus || json?.content?.openLive?.status;
          liveMap[m.id] = (status=== 'OPEN' || status==='ON_AIR' || status==='LIVE');
        }catch(e){}
      }));
      localStorage.setItem(LIVE_KEY, JSON.stringify(liveMap));
      updateLiveBanner();
      renderMembers();
      renderFavorites();
    }
    function updateLiveBanner(){
      const liveMap = JSON.parse(localStorage.getItem(LIVE_KEY)||'{}');
      const lives = MEMBERS.filter(m=>liveMap[m.id]);
      const banner = $('#liveBanner');
      if(lives.length){
        banner.style.display='inline-flex';
        banner.textContent = `📡 ${lives.length}명 방송 중!`;
        banner.onclick = ()=>{
          const set=favSetGet();
          const target = lives.find(l=>set.has(l.id)) || lives[0];
          if(target) window.open(target.stream, '_blank');
        };
      } else {
        banner.style.display='none';
      }
    }

    /* ===================== AVATAR (간단 합성) ===================== */
    const avCanvas = document.getElementById('avatarCanvas');
    const avCtx = avCanvas.getContext('2d');
    let avLayers = [];
    function redrawAvatar(){ avCtx.clearRect(0,0,avCanvas.width,avCanvas.height); avLayers.forEach(img=> avCtx.drawImage(img,0,0,avCanvas.width,avCanvas.height)); }
    function addAvatarPart(src){ const img=new Image(); img.onload=()=>{ avLayers.push(img); redrawAvatar(); renderPartChips(); }; img.src=src; }
    function renderPartChips(){ const wrap=document.getElementById('avatarParts'); wrap.innerHTML=''; avLayers.forEach((img,i)=>{ const b=document.createElement('button'); b.className='btn'; b.textContent=`파츠 ${i+1} ✕`; b.onclick=()=>{ avLayers.splice(i,1); redrawAvatar(); renderPartChips(); }; wrap.appendChild(b); }); }
    document.getElementById('partUpload').addEventListener('change', (e)=>{ const files=[...e.target.files]; files.forEach(f=>{ const r=new FileReader(); r.onload=()=>addAvatarPart(r.result); r.readAsDataURL(f); }); e.target.value=''; });
    document.getElementById('avatarClear').addEventListener('click', ()=>{ avLayers=[]; redrawAvatar(); renderPartChips(); });
    document.getElementById('avatarSave').addEventListener('click', ()=>{ const a=avCanvas.toDataURL('image/png'); const aTag=document.createElement('a'); aTag.href=a; aTag.download='avatar.png'; aTag.click(); });

    /* ===================== INIT ===================== */
    function votePeriodLabelBoot(){ const d=new Date(); const y=d.getFullYear(), m=d.getMonth()+1; const last=new Date(y,m,0).getDate(); return `${y}.${String(m).padStart(2,'0')}.01 - ${y}.${String(m).padStart(2,'0')}.${last}`; }
    function init(){
      const savedProxy = window.CONFIG.X_API || localStorage.getItem('xProxyBase')||''; if(savedProxy) $('#xProxyInput').value = savedProxy;
      currentGroup='STELLIVE';
      renderMembers();
      renderFavorites();
      populateGalleryTags(); populateGalleryMembers(); renderGallery();
      populateCoverMembers(); renderCover();
      renderList('logs', $('#logList'));
      renderList('confs', $('#confList'));
      document.getElementById('votePeriod').textContent = votePeriodLabelBoot();
      renderVote();
      checkLive(); setInterval(checkLive, 60*1000);
    }

    async function boot(){
      await loadStaticConfig();
      initUser();
      init();
      waitGis();
    }
    boot();

    // PWA/Standalone 감지: 팝업 제한 시 redirect 모드 사용
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone;
    window.GIS_UX = isStandalone ? 'redirect' : 'popup';
  </script>
</body>
</html>

        id: deployment
        uses: actions/deploy-pages@v4
